generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int       @id @default(autoincrement())
  firstName  String
  lastName   String
  phone      String?
  username   String    @unique
  email      String?   @unique
  password   String
  role       String
  businessId Int?
  business   Business? @relation(fields: [businessId], references: [id])
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Business {
  id            Int            @id @default(autoincrement())
  type          String
  profile       Json
  prices        Json
  themeSettings Json
  subscription  Subscription?   // relación 1:1, no lleva fields aquí
  users         User[]
  clients       Client[]
  appointments  Appointment[]
  products      Product[]
  payments      Payment[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model Client {
  id            Int      @id @default(autoincrement())
  business      Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  businessId    Int
  name          String
  phone         String?
  email         String?
  birthDate     DateTime?
  serviceHistory Json?
  preferences   String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Appointment {
  id         Int      @id @default(autoincrement())
  business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  businessId Int
  clientName String
  services   Json
  date       DateTime
  time       String
  status     String
  cost       Int?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Product {
  id          Int      @id @default(autoincrement())
  business    Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  businessId  Int
  name        String
  currentStock Int
  minStock    Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Plan {
  id            Int            @id @default(autoincrement())
  name          String
  price         Int
  features      Json
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  subscriptions Subscription[]
}

model Subscription {
  id         Int        @id @default(autoincrement())
  business   Business   @relation(fields: [businessId], references: [id], onDelete: Cascade)
  businessId Int        @unique   // asegura 1:1
  plan       Plan?      @relation(fields: [planId], references: [id])
  planId     Int?
  status     String
  startDate  DateTime
  endDate    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  payments   Payment[]
}

model Payment {
  id             Int          @id @default(autoincrement())
  business       Business     @relation(fields: [businessId], references: [id], onDelete: Cascade)
  businessId     Int
  subscription   Subscription @relation(fields: [subscriptionId], references: [id])
  subscriptionId Int
  amount         Int
  date           DateTime
  planName       String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}
